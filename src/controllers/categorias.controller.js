import { pool } from "../db.js";

// Funci√≥n para crear categor√≠as por defecto
const crearCategoriasPorDefecto = async () => {
  const categoriasPorDefecto = [
    // Categor√≠as de Ingresos
    { nombre: 'Salario', tipo: 'ingreso', icono: 'üí∞', color: '#28a745' },
    { nombre: 'Regalos', tipo: 'ingreso', icono: 'üéÅ', color: '#e83e8c' },
    { nombre: 'Reembolsos', tipo: 'ingreso', icono: '‚Ü©Ô∏è', color: '#6f42c1' },
    { nombre: 'Otros Ingresos', tipo: 'ingreso', icono: '‚ûï', color: '#20c997' },
    
    // Categor√≠as de Gastos
    { nombre: 'Alimentaci√≥n', tipo: 'gasto', icono: 'üçΩÔ∏è', color: '#dc3545' },
    { nombre: 'Transporte', tipo: 'gasto', icono: 'üöó', color: '#fd7e14' },
    { nombre: 'Vivienda', tipo: 'gasto', icono: 'üè†', color: '#6f42c1' },
    { nombre: 'Servicios', tipo: 'gasto', icono: '‚ö°', color: '#ffc107' },
    { nombre: 'Entretenimiento', tipo: 'gasto', icono: 'üé¨', color: '#e83e8c' },
    { nombre: 'Otros Gastos', tipo: 'gasto', icono: 'üí∏', color: '#dc3545' }
  ];

  try {
    for (const categoria of categoriasPorDefecto) {
      await pool.query(
        `INSERT INTO categorias (usuario_id, nombre, tipo, icono, color) 
         VALUES (NULL, ?, ?, ?, ?)`,
        [categoria.nombre, categoria.tipo, categoria.icono, categoria.color]
      );
    }
    console.log('‚úÖ Categor√≠as por defecto creadas exitosamente');
  } catch (error) {
    console.error('‚ùå Error creando categor√≠as por defecto:', error);
  }
};

export const getCategorias = async (req, res) => {
  try {
    // Obtener categor√≠as del usuario autenticado y categor√≠as globales (usuario_id = NULL)
    const [rows] = await pool.query(
      `SELECT * FROM categorias 
       WHERE usuario_id = ? OR usuario_id IS NULL 
       ORDER BY usuario_id ASC, nombre ASC`,
      [req.user.dbUserId]
    );
    
    // Si no hay categor√≠as globales, crearlas autom√°ticamente
    const categoriasGlobales = rows.filter(cat => cat.usuario_id === null);
    if (categoriasGlobales.length === 0) {
      await crearCategoriasPorDefecto();
      // Obtener las categor√≠as nuevamente despu√©s de crear las por defecto
      const [newRows] = await pool.query(
        `SELECT * FROM categorias 
         WHERE usuario_id = ? OR usuario_id IS NULL 
         ORDER BY usuario_id ASC, nombre ASC`,
        [req.user.dbUserId]
      );
      return res.json(newRows);
    }
    
    res.json(rows);
  } catch (error) {
    console.error('Error getting categorias:', error);
    return res.status(500).json({
      message: "Something goes wrong",
    });
  }
};

export const getCategoria = async (req, res) => {
  try {
    const [rows] = await pool.query(
      "SELECT * FROM categorias WHERE id = ? AND (usuario_id = ? OR usuario_id IS NULL)",
      [req.params.id, req.user.dbUserId]
    );
    
    if (rows.length <= 0) {
      return res.status(404).json({
        message: "Categoria not found",
      });
    }
    res.json(rows[0]);
  } catch (error) {
    console.error('Error getting categoria:', error);
    return res.status(500).json({
      message: "Something goes wrong",
    });
  }
};

export const createCategoria = async (req, res) => {
  const { nombre, tipo, icono, color } = req.body;
  
  // Validar que el tipo sea v√°lido
  const tiposValidos = ['ingreso', 'gasto'];
  if (!tiposValidos.includes(tipo)) {
    return res.status(400).json({
      message: `Tipo inv√°lido. Los tipos v√°lidos son: ${tiposValidos.join(', ')}`
    });
  }

  // Validar que el nombre no est√© vac√≠o
  if (!nombre || nombre.trim() === '') {
    return res.status(400).json({
      message: "El nombre de la categor√≠a es requerido"
    });
  }
  
  try {
    // Verificar si ya existe una categor√≠a con el mismo nombre para este usuario
    const [existingCategoria] = await pool.query(
      "SELECT * FROM categorias WHERE nombre = ? AND usuario_id = ?",
      [nombre.trim(), req.user.dbUserId]
    );

    if (existingCategoria.length > 0) {
      return res.status(400).json({
        message: "Ya existe una categor√≠a con este nombre"
      });
    }

    const [rows] = await pool.query(
      `INSERT INTO categorias 
       (usuario_id, nombre, tipo, icono, color) 
       VALUES (?, ?, ?, ?, ?)`,
      [req.user.dbUserId, nombre.trim(), tipo, icono || null, color || null]
    );
    
    res.status(201).json({
      id: rows.insertId,
      usuario_id: req.user.dbUserId,
      nombre: nombre.trim(),
      tipo,
      icono: icono || null,
      color: color || null
    });
  } catch (error) {
    console.error('Error creating categoria:', error);
    return res.status(500).json({
      message: "Something goes wrong",
    });
  }
};

export const deleteCategoria = async (req, res) => {
  try {
    // Solo permitir eliminar categor√≠as propias del usuario (no las globales)
    const [result] = await pool.query(
      "DELETE FROM categorias WHERE id = ? AND usuario_id = ?",
      [req.params.id, req.user.dbUserId]
    );
    
    if (result.affectedRows <= 0) {
      return res.status(404).json({
        message: "Categoria not found or cannot be deleted",
      });
    }
    res.sendStatus(204);
  } catch (error) {
    console.error('Error deleting categoria:', error);
    return res.status(500).json({
      message: "Something goes wrong",
    });
  }
};

export const updateCategoria = async (req, res) => {
  const { id } = req.params;
  const { nombre, tipo, icono, color } = req.body;

  // Validar que el tipo sea v√°lido si se proporciona
  if (tipo) {
    const tiposValidos = ['ingreso', 'gasto'];
    if (!tiposValidos.includes(tipo)) {
      return res.status(400).json({
        message: `Tipo inv√°lido. Los tipos v√°lidos son: ${tiposValidos.join(', ')}`
      });
    }
  }

  // Validar que el nombre no est√© vac√≠o si se proporciona
  if (nombre && nombre.trim() === '') {
    return res.status(400).json({
      message: "El nombre de la categor√≠a no puede estar vac√≠o"
    });
  }

  try {
    // Solo permitir actualizar categor√≠as propias del usuario (no las globales)
    const [existingCategoria] = await pool.query(
      "SELECT * FROM categorias WHERE id = ? AND usuario_id = ?",
      [id, req.user.dbUserId]
    );

    if (existingCategoria.length === 0) {
      return res.status(404).json({
        message: "Categoria not found or cannot be updated",
      });
    }

    // Si se est√° cambiando el nombre, verificar que no exista otro con el mismo nombre
    if (nombre && nombre.trim() !== existingCategoria[0].nombre) {
      const [duplicateCategoria] = await pool.query(
        "SELECT * FROM categorias WHERE nombre = ? AND usuario_id = ? AND id != ?",
        [nombre.trim(), req.user.dbUserId, id]
      );

      if (duplicateCategoria.length > 0) {
        return res.status(400).json({
          message: "Ya existe una categor√≠a con este nombre"
        });
      }
    }

    const [result] = await pool.query(
      `UPDATE categorias 
       SET nombre = ?, tipo = ?, icono = ?, color = ?
       WHERE id = ? AND usuario_id = ?`,
      [
        nombre ? nombre.trim() : existingCategoria[0].nombre,
        tipo || existingCategoria[0].tipo,
        icono !== undefined ? icono : existingCategoria[0].icono,
        color !== undefined ? color : existingCategoria[0].color,
        id,
        req.user.dbUserId
      ]
    );
    
    if (result.affectedRows === 0) {
      return res.status(404).json({
        message: "Categoria not found",
      });
    }
    
    const [rows] = await pool.query(
      "SELECT * FROM categorias WHERE id = ? AND usuario_id = ?",
      [id, req.user.dbUserId]
    );
    res.json(rows[0]);
  } catch (error) {
    console.error('Error updating categoria:', error);
    return res.status(500).json({
      message: "Something goes wrong",
    });
  }
};

export const getCategoriasPorTipo = async (req, res) => {
  try {
    const { tipo } = req.params;
    
    // Validar que el tipo sea v√°lido
    const tiposValidos = ['ingreso', 'gasto'];
    if (!tiposValidos.includes(tipo)) {
      return res.status(400).json({
        message: `Tipo inv√°lido. Los tipos v√°lidos son: ${tiposValidos.join(', ')}`
      });
    }

    const [rows] = await pool.query(
      `SELECT * FROM categorias 
       WHERE tipo = ? AND (usuario_id = ? OR usuario_id IS NULL)
       ORDER BY usuario_id ASC, nombre ASC`,
      [tipo, req.user.dbUserId]
    );
    
    res.json(rows);
  } catch (error) {
    console.error('Error getting categorias por tipo:', error);
    return res.status(500).json({
      message: "Something goes wrong",
    });
  }
};

// Funci√≥n para crear categor√≠as por defecto para un usuario espec√≠fico
export const crearCategoriasUsuario = async (req, res) => {
  try {
    // Verificar si el usuario ya tiene categor√≠as personalizadas
    const [existingCategorias] = await pool.query(
      "SELECT COUNT(*) as count FROM categorias WHERE usuario_id = ?",
      [req.user.dbUserId]
    );

    if (existingCategorias[0].count > 0) {
      return res.status(400).json({
        message: "El usuario ya tiene categor√≠as personalizadas"
      });
    }

    const categoriasUsuario = [
      // Categor√≠as de Ingresos personalizadas
      { nombre: 'Mi Salario', tipo: 'ingreso', icono: 'üí∞', color: '#28a745' },
      { nombre: 'Proyectos', tipo: 'ingreso', icono: 'üíº', color: '#17a2b8' },
      
      // Categor√≠as de Gastos personalizadas
      { nombre: 'Comida', tipo: 'gasto', icono: 'üçΩÔ∏è', color: '#dc3545' },
      { nombre: 'Gasolina', tipo: 'gasto', icono: '‚õΩ', color: '#fd7e14' },
      { nombre: 'Renta', tipo: 'gasto', icono: 'üè†', color: '#6f42c1' }
    ];

    for (const categoria of categoriasUsuario) {
      await pool.query(
        `INSERT INTO categorias (usuario_id, nombre, tipo, icono, color) 
         VALUES (?, ?, ?, ?, ?)`,
        [req.user.dbUserId, categoria.nombre, categoria.tipo, categoria.icono, categoria.color]
      );
    }

    // Obtener todas las categor√≠as del usuario (incluyendo globales)
    const [allCategorias] = await pool.query(
      `SELECT * FROM categorias 
       WHERE usuario_id = ? OR usuario_id IS NULL 
       ORDER BY usuario_id ASC, nombre ASC`,
      [req.user.dbUserId]
    );

    res.status(201).json({
      message: "Categor√≠as por defecto creadas exitosamente",
      categorias: allCategorias
    });
  } catch (error) {
    console.error('Error creating user categories:', error);
    return res.status(500).json({
      message: "Something goes wrong",
    });
  }
}; 