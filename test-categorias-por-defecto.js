// Ejemplo de c√≥mo usar las nuevas funcionalidades de categor√≠as por defecto
// IMPORTANTE: Para obtener un token v√°lido, usa el hook useAuth() en tu frontend:
// const { getToken } = useAuth();
// const token = await getToken();
// 
// O para pruebas, obt√©n el token de la cookie __session en el navegador
// despu√©s de iniciar sesi√≥n con Clerk

const BASE_URL = 'http://localhost:3001/api';

// Ejemplo de obtenci√≥n de categor√≠as (incluye globales y personales)
const getCategorias = async () => {
  const response = await fetch(`${BASE_URL}/categorias`, {
    headers: {
      'Authorization': 'Bearer <CLERK_TOKEN>'
    }
  });
  
  const data = await response.json();
  console.log('üìÇ Todas las categor√≠as:', data);
  
  // Separar categor√≠as globales y personales
  const categoriasGlobales = data.filter(cat => cat.usuario_id === null);
  const categoriasPersonales = data.filter(cat => cat.usuario_id !== null);
  
  console.log('üåç Categor√≠as globales:', categoriasGlobales.length);
  console.log('üë§ Categor√≠as personales:', categoriasPersonales.length);
  
  return data;
};

// Ejemplo de obtenci√≥n de categor√≠as por tipo
const getCategoriasPorTipo = async (tipo) => {
  const response = await fetch(`${BASE_URL}/categorias/tipo/${tipo}`, {
    headers: {
      'Authorization': 'Bearer <CLERK_TOKEN>'
    }
  });
  
  const data = await response.json();
  console.log(`üìÇ Categor√≠as de ${tipo}:`, data);
  
  return data;
};

// Ejemplo de creaci√≥n de categor√≠as por defecto para el usuario
const crearCategoriasUsuario = async () => {
  const response = await fetch(`${BASE_URL}/categorias/crear-defecto`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer <CLERK_TOKEN>'
    }
  });
  
  const data = await response.json();
  console.log('‚úÖ Categor√≠as por defecto creadas:', data);
  
  return data;
};

// Ejemplo de creaci√≥n de categor√≠a personalizada
const crearCategoriaPersonalizada = async () => {
  const response = await fetch(`${BASE_URL}/categorias`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer <CLERK_TOKEN>'
    },
    body: JSON.stringify({
      nombre: 'Mi Categor√≠a Personalizada',
      tipo: 'gasto',
      icono: 'üéØ',
      color: '#ff6b6b'
    })
  });
  
  const data = await response.json();
  console.log('‚úÖ Categor√≠a personalizada creada:', data);
  
  return data;
};

// Ejemplo de uso con async/await
const testCategoriasPorDefecto = async () => {
  try {
    console.log('üöÄ Iniciando pruebas de categor√≠as por defecto...\n');
    
    // Obtener todas las categor√≠as (se crear√°n autom√°ticamente si no existen)
    console.log('üìÇ Obteniendo categor√≠as...');
    await getCategorias();
    console.log('\n');
    
    // Obtener categor√≠as por tipo
    console.log('üí∞ Obteniendo categor√≠as de ingresos...');
    await getCategoriasPorTipo('ingreso');
    console.log('\n');
    
    console.log('üí∏ Obteniendo categor√≠as de gastos...');
    await getCategoriasPorTipo('gasto');
    console.log('\n');
    
    // Crear categor√≠as por defecto para el usuario (solo si no tiene categor√≠as personales)
    console.log('üë§ Creando categor√≠as por defecto para el usuario...');
    try {
      await crearCategoriasUsuario();
    } catch (error) {
      console.log('‚ÑπÔ∏è  El usuario ya tiene categor√≠as personales o ya se crearon las por defecto');
    }
    console.log('\n');
    
    // Crear una categor√≠a personalizada
    console.log('üéØ Creando categor√≠a personalizada...');
    await crearCategoriaPersonalizada();
    console.log('\n');
    
    // Obtener categor√≠as nuevamente para ver los cambios
    console.log('üìÇ Obteniendo categor√≠as actualizadas...');
    await getCategorias();
    console.log('\n');
    
    console.log('‚úÖ Pruebas completadas exitosamente!');
    console.log('\nüí° Notas importantes:');
    console.log('   - Las categor√≠as globales se crean autom√°ticamente la primera vez');
    console.log('   - Las categor√≠as globales est√°n disponibles para todos los usuarios');
    console.log('   - Los usuarios pueden crear categor√≠as personales adicionales');
    console.log('   - Las categor√≠as personales tienen prioridad sobre las globales');
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  }
};

// Funci√≥n para mostrar informaci√≥n sobre las categor√≠as
const mostrarInformacionCategorias = () => {
  console.log('üìã Informaci√≥n sobre categor√≠as por defecto:');
  console.log('\nüåç Categor√≠as Globales (usuario_id = NULL):');
  console.log('   - Disponibles para todos los usuarios');
  console.log('   - Se crean autom√°ticamente la primera vez');
  console.log('   - No se pueden eliminar ni modificar por usuarios individuales');
  console.log('   - Incluyen categor√≠as b√°sicas como: Salario, Alimentaci√≥n, Transporte, etc.');
  
  console.log('\nüë§ Categor√≠as Personales (usuario_id = ID del usuario):');
  console.log('   - Creadas por cada usuario individualmente');
  console.log('   - Se pueden eliminar y modificar');
  console.log('   - Tienen prioridad sobre las globales');
  console.log('   - Permiten personalizaci√≥n completa');
  
  console.log('\nüé® Caracter√≠sticas de las categor√≠as:');
  console.log('   - Nombre: Identificador √∫nico');
  console.log('   - Tipo: "ingreso" o "gasto"');
  console.log('   - Icono: Emoji para representaci√≥n visual');
  console.log('   - Color: C√≥digo hexadecimal para personalizaci√≥n');
};

// Descomenta la l√≠nea siguiente para ejecutar las pruebas
// testCategoriasPorDefecto();

// Descomenta la l√≠nea siguiente para mostrar informaci√≥n
// mostrarInformacionCategorias(); 